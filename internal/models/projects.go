// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

type ProjectsListJson []ProjectsJson

type ProjectsJson struct {
	// Closed corresponds to the JSON schema field "closed".
	Closed bool `json:"closed" yaml:"closed" mapstructure:"closed"`

	// Fields corresponds to the JSON schema field "fields".
	Fields ProjectsJsonElemFields `json:"fields" yaml:"fields" mapstructure:"fields"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Items corresponds to the JSON schema field "items".
	Items ProjectsJsonElemItems `json:"items" yaml:"items" mapstructure:"items"`

	// Number corresponds to the JSON schema field "number".
	Number float64 `json:"number" yaml:"number" mapstructure:"number"`

	// Owner corresponds to the JSON schema field "owner".
	Owner ProjectsJsonElemOwner `json:"owner" yaml:"owner" mapstructure:"owner"`

	// Public corresponds to the JSON schema field "public".
	Public bool `json:"public" yaml:"public" mapstructure:"public"`

	// Readme corresponds to the JSON schema field "readme".
	Readme string `json:"readme" yaml:"readme" mapstructure:"readme"`

	// ShortDescription corresponds to the JSON schema field "shortDescription".
	ShortDescription string `json:"shortDescription" yaml:"shortDescription" mapstructure:"shortDescription"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

type ProjectsJsonElemFields struct {
	// TotalCount corresponds to the JSON schema field "totalCount".
	TotalCount float64 `json:"totalCount" yaml:"totalCount" mapstructure:"totalCount"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProjectsJsonElemFields) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["totalCount"]; raw != nil && !ok {
		return fmt.Errorf("field totalCount in ProjectsJsonElemFields: required")
	}
	type Plain ProjectsJsonElemFields
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProjectsJsonElemFields(plain)
	return nil
}

type ProjectsJsonElemItems struct {
	// TotalCount corresponds to the JSON schema field "totalCount".
	TotalCount float64 `json:"totalCount" yaml:"totalCount" mapstructure:"totalCount"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProjectsJsonElemItems) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["totalCount"]; raw != nil && !ok {
		return fmt.Errorf("field totalCount in ProjectsJsonElemItems: required")
	}
	type Plain ProjectsJsonElemItems
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProjectsJsonElemItems(plain)
	return nil
}

type ProjectsJsonElemOwner struct {
	// Login corresponds to the JSON schema field "login".
	Login string `json:"login" yaml:"login" mapstructure:"login"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProjectsJsonElemOwner) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["login"]; raw != nil && !ok {
		return fmt.Errorf("field login in ProjectsJsonElemOwner: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in ProjectsJsonElemOwner: required")
	}
	type Plain ProjectsJsonElemOwner
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.Login) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "login", 1)
	}
	if len(plain.Type) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "type", 1)
	}
	*j = ProjectsJsonElemOwner(plain)
	return nil
}
