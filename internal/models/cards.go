// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

type CardsListJson []CardsJson

type CardsJson struct {
	// Assignees corresponds to the JSON schema field "assignees".
	Assignees []interface{} `json:"assignees" yaml:"assignees" mapstructure:"assignees"`

	// Content corresponds to the JSON schema field "content".
	Content CardsJsonElemContent `json:"content" yaml:"content" mapstructure:"content"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Labels corresponds to the JSON schema field "labels".
	Labels []interface{} `json:"labels" yaml:"labels" mapstructure:"labels"`

	// Milestone corresponds to the JSON schema field "milestone".
	Milestone CardsJsonElemMilestone `json:"milestone" yaml:"milestone" mapstructure:"milestone"`

	// Repository corresponds to the JSON schema field "repository".
	Repository string `json:"repository" yaml:"repository" mapstructure:"repository"`

	// Status corresponds to the JSON schema field "status".
	Status string `json:"status" yaml:"status" mapstructure:"status"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

type CardsJsonElemContent struct {
	// Body corresponds to the JSON schema field "body".
	Body string `json:"body" yaml:"body" mapstructure:"body"`

	// Number corresponds to the JSON schema field "number".
	Number float64 `json:"number" yaml:"number" mapstructure:"number"`

	// Repository corresponds to the JSON schema field "repository".
	Repository string `json:"repository" yaml:"repository" mapstructure:"repository"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CardsJsonElemContent) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["body"]; raw != nil && !ok {
		return fmt.Errorf("field body in CardsJsonElemContent: required")
	}
	if _, ok := raw["number"]; raw != nil && !ok {
		return fmt.Errorf("field number in CardsJsonElemContent: required")
	}
	if _, ok := raw["repository"]; raw != nil && !ok {
		return fmt.Errorf("field repository in CardsJsonElemContent: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in CardsJsonElemContent: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in CardsJsonElemContent: required")
	}
	if _, ok := raw["url"]; raw != nil && !ok {
		return fmt.Errorf("field url in CardsJsonElemContent: required")
	}
	type Plain CardsJsonElemContent
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.Body) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "body", 1)
	}
	if len(plain.Repository) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "repository", 1)
	}
	if len(plain.Title) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "title", 1)
	}
	if len(plain.Type) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "type", 1)
	}
	if len(plain.Url) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "url", 1)
	}
	*j = CardsJsonElemContent(plain)
	return nil
}

type CardsJsonElemMilestone struct {
	// Description corresponds to the JSON schema field "description".
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// DueOn corresponds to the JSON schema field "dueOn".
	DueOn string `json:"dueOn" yaml:"dueOn" mapstructure:"dueOn"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CardsJsonElemMilestone) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["description"]; raw != nil && !ok {
		return fmt.Errorf("field description in CardsJsonElemMilestone: required")
	}
	if _, ok := raw["dueOn"]; raw != nil && !ok {
		return fmt.Errorf("field dueOn in CardsJsonElemMilestone: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in CardsJsonElemMilestone: required")
	}
	type Plain CardsJsonElemMilestone
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.DueOn) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "dueOn", 1)
	}
	if len(plain.Title) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "title", 1)
	}
	*j = CardsJsonElemMilestone(plain)
	return nil
}
