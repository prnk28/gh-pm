// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package models

import "encoding/json"
import "fmt"

type UserJson struct {
	// AvatarUrl corresponds to the JSON schema field "avatar_url".
	AvatarUrl string `json:"avatar_url" yaml:"avatar_url" mapstructure:"avatar_url"`

	// Bio corresponds to the JSON schema field "bio".
	Bio string `json:"bio" yaml:"bio" mapstructure:"bio"`

	// Blog corresponds to the JSON schema field "blog".
	Blog string `json:"blog" yaml:"blog" mapstructure:"blog"`

	// Collaborators corresponds to the JSON schema field "collaborators".
	Collaborators float64 `json:"collaborators" yaml:"collaborators" mapstructure:"collaborators"`

	// Company corresponds to the JSON schema field "company".
	Company string `json:"company" yaml:"company" mapstructure:"company"`

	// CreatedAt corresponds to the JSON schema field "created_at".
	CreatedAt string `json:"created_at" yaml:"created_at" mapstructure:"created_at"`

	// DiskUsage corresponds to the JSON schema field "disk_usage".
	DiskUsage float64 `json:"disk_usage" yaml:"disk_usage" mapstructure:"disk_usage"`

	// Email corresponds to the JSON schema field "email".
	Email string `json:"email" yaml:"email" mapstructure:"email"`

	// EventsUrl corresponds to the JSON schema field "events_url".
	EventsUrl string `json:"events_url" yaml:"events_url" mapstructure:"events_url"`

	// Followers corresponds to the JSON schema field "followers".
	Followers float64 `json:"followers" yaml:"followers" mapstructure:"followers"`

	// FollowersUrl corresponds to the JSON schema field "followers_url".
	FollowersUrl string `json:"followers_url" yaml:"followers_url" mapstructure:"followers_url"`

	// Following corresponds to the JSON schema field "following".
	Following float64 `json:"following" yaml:"following" mapstructure:"following"`

	// FollowingUrl corresponds to the JSON schema field "following_url".
	FollowingUrl string `json:"following_url" yaml:"following_url" mapstructure:"following_url"`

	// GistsUrl corresponds to the JSON schema field "gists_url".
	GistsUrl string `json:"gists_url" yaml:"gists_url" mapstructure:"gists_url"`

	// GravatarId corresponds to the JSON schema field "gravatar_id".
	GravatarId string `json:"gravatar_id" yaml:"gravatar_id" mapstructure:"gravatar_id"`

	// Hireable corresponds to the JSON schema field "hireable".
	Hireable interface{} `json:"hireable,omitempty" yaml:"hireable,omitempty" mapstructure:"hireable,omitempty"`

	// HtmlUrl corresponds to the JSON schema field "html_url".
	HtmlUrl string `json:"html_url" yaml:"html_url" mapstructure:"html_url"`

	// Id corresponds to the JSON schema field "id".
	Id float64 `json:"id" yaml:"id" mapstructure:"id"`

	// Location corresponds to the JSON schema field "location".
	Location string `json:"location" yaml:"location" mapstructure:"location"`

	// Login corresponds to the JSON schema field "login".
	Login string `json:"login" yaml:"login" mapstructure:"login"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// NodeId corresponds to the JSON schema field "node_id".
	NodeId string `json:"node_id" yaml:"node_id" mapstructure:"node_id"`

	// NotificationEmail corresponds to the JSON schema field "notification_email".
	NotificationEmail string `json:"notification_email" yaml:"notification_email" mapstructure:"notification_email"`

	// OrganizationsUrl corresponds to the JSON schema field "organizations_url".
	OrganizationsUrl string `json:"organizations_url" yaml:"organizations_url" mapstructure:"organizations_url"`

	// OwnedPrivateRepos corresponds to the JSON schema field "owned_private_repos".
	OwnedPrivateRepos float64 `json:"owned_private_repos" yaml:"owned_private_repos" mapstructure:"owned_private_repos"`

	// Plan corresponds to the JSON schema field "plan".
	Plan UserJsonPlan `json:"plan" yaml:"plan" mapstructure:"plan"`

	// PrivateGists corresponds to the JSON schema field "private_gists".
	PrivateGists float64 `json:"private_gists" yaml:"private_gists" mapstructure:"private_gists"`

	// PublicGists corresponds to the JSON schema field "public_gists".
	PublicGists float64 `json:"public_gists" yaml:"public_gists" mapstructure:"public_gists"`

	// PublicRepos corresponds to the JSON schema field "public_repos".
	PublicRepos float64 `json:"public_repos" yaml:"public_repos" mapstructure:"public_repos"`

	// ReceivedEventsUrl corresponds to the JSON schema field "received_events_url".
	ReceivedEventsUrl string `json:"received_events_url" yaml:"received_events_url" mapstructure:"received_events_url"`

	// ReposUrl corresponds to the JSON schema field "repos_url".
	ReposUrl string `json:"repos_url" yaml:"repos_url" mapstructure:"repos_url"`

	// SiteAdmin corresponds to the JSON schema field "site_admin".
	SiteAdmin bool `json:"site_admin" yaml:"site_admin" mapstructure:"site_admin"`

	// StarredUrl corresponds to the JSON schema field "starred_url".
	StarredUrl string `json:"starred_url" yaml:"starred_url" mapstructure:"starred_url"`

	// SubscriptionsUrl corresponds to the JSON schema field "subscriptions_url".
	SubscriptionsUrl string `json:"subscriptions_url" yaml:"subscriptions_url" mapstructure:"subscriptions_url"`

	// TotalPrivateRepos corresponds to the JSON schema field "total_private_repos".
	TotalPrivateRepos float64 `json:"total_private_repos" yaml:"total_private_repos" mapstructure:"total_private_repos"`

	// TwitterUsername corresponds to the JSON schema field "twitter_username".
	TwitterUsername string `json:"twitter_username" yaml:"twitter_username" mapstructure:"twitter_username"`

	// TwoFactorAuthentication corresponds to the JSON schema field
	// "two_factor_authentication".
	TwoFactorAuthentication bool `json:"two_factor_authentication" yaml:"two_factor_authentication" mapstructure:"two_factor_authentication"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`

	// UpdatedAt corresponds to the JSON schema field "updated_at".
	UpdatedAt string `json:"updated_at" yaml:"updated_at" mapstructure:"updated_at"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url" mapstructure:"url"`

	// UserViewType corresponds to the JSON schema field "user_view_type".
	UserViewType string `json:"user_view_type" yaml:"user_view_type" mapstructure:"user_view_type"`
}

type UserJsonPlan struct {
	// Collaborators corresponds to the JSON schema field "collaborators".
	Collaborators float64 `json:"collaborators" yaml:"collaborators" mapstructure:"collaborators"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// PrivateRepos corresponds to the JSON schema field "private_repos".
	PrivateRepos float64 `json:"private_repos" yaml:"private_repos" mapstructure:"private_repos"`

	// Space corresponds to the JSON schema field "space".
	Space float64 `json:"space" yaml:"space" mapstructure:"space"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UserJsonPlan) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["collaborators"]; raw != nil && !ok {
		return fmt.Errorf("field collaborators in UserJsonPlan: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in UserJsonPlan: required")
	}
	if _, ok := raw["private_repos"]; raw != nil && !ok {
		return fmt.Errorf("field private_repos in UserJsonPlan: required")
	}
	if _, ok := raw["space"]; raw != nil && !ok {
		return fmt.Errorf("field space in UserJsonPlan: required")
	}
	type Plain UserJsonPlan
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.Name) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "name", 1)
	}
	*j = UserJsonPlan(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UserJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["avatar_url"]; raw != nil && !ok {
		return fmt.Errorf("field avatar_url in UserJson: required")
	}
	if _, ok := raw["bio"]; raw != nil && !ok {
		return fmt.Errorf("field bio in UserJson: required")
	}
	if _, ok := raw["blog"]; raw != nil && !ok {
		return fmt.Errorf("field blog in UserJson: required")
	}
	if _, ok := raw["collaborators"]; raw != nil && !ok {
		return fmt.Errorf("field collaborators in UserJson: required")
	}
	if _, ok := raw["company"]; raw != nil && !ok {
		return fmt.Errorf("field company in UserJson: required")
	}
	if _, ok := raw["created_at"]; raw != nil && !ok {
		return fmt.Errorf("field created_at in UserJson: required")
	}
	if _, ok := raw["disk_usage"]; raw != nil && !ok {
		return fmt.Errorf("field disk_usage in UserJson: required")
	}
	if _, ok := raw["email"]; raw != nil && !ok {
		return fmt.Errorf("field email in UserJson: required")
	}
	if _, ok := raw["events_url"]; raw != nil && !ok {
		return fmt.Errorf("field events_url in UserJson: required")
	}
	if _, ok := raw["followers"]; raw != nil && !ok {
		return fmt.Errorf("field followers in UserJson: required")
	}
	if _, ok := raw["followers_url"]; raw != nil && !ok {
		return fmt.Errorf("field followers_url in UserJson: required")
	}
	if _, ok := raw["following"]; raw != nil && !ok {
		return fmt.Errorf("field following in UserJson: required")
	}
	if _, ok := raw["following_url"]; raw != nil && !ok {
		return fmt.Errorf("field following_url in UserJson: required")
	}
	if _, ok := raw["gists_url"]; raw != nil && !ok {
		return fmt.Errorf("field gists_url in UserJson: required")
	}
	if _, ok := raw["gravatar_id"]; raw != nil && !ok {
		return fmt.Errorf("field gravatar_id in UserJson: required")
	}
	if _, ok := raw["html_url"]; raw != nil && !ok {
		return fmt.Errorf("field html_url in UserJson: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in UserJson: required")
	}
	if _, ok := raw["location"]; raw != nil && !ok {
		return fmt.Errorf("field location in UserJson: required")
	}
	if _, ok := raw["login"]; raw != nil && !ok {
		return fmt.Errorf("field login in UserJson: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in UserJson: required")
	}
	if _, ok := raw["node_id"]; raw != nil && !ok {
		return fmt.Errorf("field node_id in UserJson: required")
	}
	if _, ok := raw["notification_email"]; raw != nil && !ok {
		return fmt.Errorf("field notification_email in UserJson: required")
	}
	if _, ok := raw["organizations_url"]; raw != nil && !ok {
		return fmt.Errorf("field organizations_url in UserJson: required")
	}
	if _, ok := raw["owned_private_repos"]; raw != nil && !ok {
		return fmt.Errorf("field owned_private_repos in UserJson: required")
	}
	if _, ok := raw["plan"]; raw != nil && !ok {
		return fmt.Errorf("field plan in UserJson: required")
	}
	if _, ok := raw["private_gists"]; raw != nil && !ok {
		return fmt.Errorf("field private_gists in UserJson: required")
	}
	if _, ok := raw["public_gists"]; raw != nil && !ok {
		return fmt.Errorf("field public_gists in UserJson: required")
	}
	if _, ok := raw["public_repos"]; raw != nil && !ok {
		return fmt.Errorf("field public_repos in UserJson: required")
	}
	if _, ok := raw["received_events_url"]; raw != nil && !ok {
		return fmt.Errorf("field received_events_url in UserJson: required")
	}
	if _, ok := raw["repos_url"]; raw != nil && !ok {
		return fmt.Errorf("field repos_url in UserJson: required")
	}
	if _, ok := raw["site_admin"]; raw != nil && !ok {
		return fmt.Errorf("field site_admin in UserJson: required")
	}
	if _, ok := raw["starred_url"]; raw != nil && !ok {
		return fmt.Errorf("field starred_url in UserJson: required")
	}
	if _, ok := raw["subscriptions_url"]; raw != nil && !ok {
		return fmt.Errorf("field subscriptions_url in UserJson: required")
	}
	if _, ok := raw["total_private_repos"]; raw != nil && !ok {
		return fmt.Errorf("field total_private_repos in UserJson: required")
	}
	if _, ok := raw["twitter_username"]; raw != nil && !ok {
		return fmt.Errorf("field twitter_username in UserJson: required")
	}
	if _, ok := raw["two_factor_authentication"]; raw != nil && !ok {
		return fmt.Errorf("field two_factor_authentication in UserJson: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in UserJson: required")
	}
	if _, ok := raw["updated_at"]; raw != nil && !ok {
		return fmt.Errorf("field updated_at in UserJson: required")
	}
	if _, ok := raw["url"]; raw != nil && !ok {
		return fmt.Errorf("field url in UserJson: required")
	}
	if _, ok := raw["user_view_type"]; raw != nil && !ok {
		return fmt.Errorf("field user_view_type in UserJson: required")
	}
	type Plain UserJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.AvatarUrl) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "avatar_url", 1)
	}
	if len(plain.Bio) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "bio", 1)
	}
	if len(plain.Blog) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "blog", 1)
	}
	if len(plain.Company) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "company", 1)
	}
	if len(plain.CreatedAt) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "created_at", 1)
	}
	if len(plain.Email) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "email", 1)
	}
	if len(plain.EventsUrl) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "events_url", 1)
	}
	if len(plain.FollowersUrl) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "followers_url", 1)
	}
	if len(plain.FollowingUrl) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "following_url", 1)
	}
	if len(plain.GistsUrl) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "gists_url", 1)
	}
	if len(plain.HtmlUrl) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "html_url", 1)
	}
	if len(plain.Location) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "location", 1)
	}
	if len(plain.Login) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "login", 1)
	}
	if len(plain.Name) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "name", 1)
	}
	if len(plain.NodeId) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "node_id", 1)
	}
	if len(plain.NotificationEmail) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "notification_email", 1)
	}
	if len(plain.OrganizationsUrl) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "organizations_url", 1)
	}
	if len(plain.ReceivedEventsUrl) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "received_events_url", 1)
	}
	if len(plain.ReposUrl) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "repos_url", 1)
	}
	if len(plain.StarredUrl) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "starred_url", 1)
	}
	if len(plain.SubscriptionsUrl) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "subscriptions_url", 1)
	}
	if len(plain.TwitterUsername) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "twitter_username", 1)
	}
	if len(plain.Type) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "type", 1)
	}
	if len(plain.UpdatedAt) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "updated_at", 1)
	}
	if len(plain.Url) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "url", 1)
	}
	if len(plain.UserViewType) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "user_view_type", 1)
	}
	*j = UserJson(plain)
	return nil
}
