// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package models

import "encoding/json"
import "fmt"

type IssuesJson []struct {
	// Assignees corresponds to the JSON schema field "assignees".
	Assignees []interface{} `json:"assignees" yaml:"assignees" mapstructure:"assignees"`

	// Author corresponds to the JSON schema field "author".
	Author IssuesJsonElemAuthor `json:"author" yaml:"author" mapstructure:"author"`

	// Body corresponds to the JSON schema field "body".
	Body string `json:"body" yaml:"body" mapstructure:"body"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Labels corresponds to the JSON schema field "labels".
	Labels []interface{} `json:"labels" yaml:"labels" mapstructure:"labels"`

	// Milestone corresponds to the JSON schema field "milestone".
	Milestone interface{} `json:"milestone,omitempty" yaml:"milestone,omitempty" mapstructure:"milestone,omitempty"`

	// Number corresponds to the JSON schema field "number".
	Number float64 `json:"number" yaml:"number" mapstructure:"number"`

	// ProjectCards corresponds to the JSON schema field "projectCards".
	ProjectCards []interface{} `json:"projectCards" yaml:"projectCards" mapstructure:"projectCards"`

	// ProjectItems corresponds to the JSON schema field "projectItems".
	ProjectItems []interface{} `json:"projectItems" yaml:"projectItems" mapstructure:"projectItems"`

	// State corresponds to the JSON schema field "state".
	State string `json:"state" yaml:"state" mapstructure:"state"`

	// StateReason corresponds to the JSON schema field "stateReason".
	StateReason string `json:"stateReason" yaml:"stateReason" mapstructure:"stateReason"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

type IssuesJsonElemAuthor struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// IsBot corresponds to the JSON schema field "is_bot".
	IsBot bool `json:"is_bot" yaml:"is_bot" mapstructure:"is_bot"`

	// Login corresponds to the JSON schema field "login".
	Login string `json:"login" yaml:"login" mapstructure:"login"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IssuesJsonElemAuthor) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in IssuesJsonElemAuthor: required")
	}
	if _, ok := raw["is_bot"]; raw != nil && !ok {
		return fmt.Errorf("field is_bot in IssuesJsonElemAuthor: required")
	}
	if _, ok := raw["login"]; raw != nil && !ok {
		return fmt.Errorf("field login in IssuesJsonElemAuthor: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in IssuesJsonElemAuthor: required")
	}
	type Plain IssuesJsonElemAuthor
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.Id) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "id", 1)
	}
	if len(plain.Login) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "login", 1)
	}
	if len(plain.Name) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "name", 1)
	}
	*j = IssuesJsonElemAuthor(plain)
	return nil
}
